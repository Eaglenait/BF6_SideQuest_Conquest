const esbuild = require("esbuild");
const fs = require("fs");
const path = require("path");

const watchMode = process.argv.includes("--watch");
const maxOutputBytes = 4096 * 1024; // 4096 kB limit
const outputFile = "sidequests_conquest_script.ts";

function createSizeLimitPlugin({ outfile, limitBytes, isWatch }) {
    return {
        name: "size-limit",
        setup(build) {
            build.onEnd(result => {
                if (result.errors.length > 0) {
                    return;
                }

                const outputPath = path.resolve(outfile);
                if (!fs.existsSync(outputPath)) {
                    console.error(`[size-limit] Output file not found: ${outputPath}`);
                    if (!isWatch) {
                        throw new Error("Bundle output missing for size check.");
                    }
                    return;
                }

                const { size } = fs.statSync(outputPath);
                if (size > limitBytes) {
                    const limitKb = (limitBytes / 1024).toFixed(0);
                    const sizeKb = (size / 1024).toFixed(0);
                    const message = `[size-limit] Bundle size ${sizeKb} kB exceeds limit ${limitKb} kB.`;
                    console.error(message);
                    if (!isWatch) {
                        throw new Error(message);
                    }
                } else if (isWatch) {
                    const sizeKb = (size / 1024).toFixed(0);
                    console.log(`[size-limit] Bundle size OK: ${sizeKb} kB (limit ${(limitBytes / 1024).toFixed(0)} kB).`);
                }
            });
        }
    };
}

const buildOptions = {
    entryPoints: ["src/index.ts"],
    bundle: true,
    format: "esm",
    platform: "neutral",
    target: "es2020",
    outfile: outputFile,
    tsconfig: "tsconfig.json",
    logLevel: "info",
    banner: {
        js: "// Auto-generated by esbuild. Do not edit this file directly.\n"
    },
    plugins: [
        createSizeLimitPlugin({ outfile: outputFile, limitBytes: maxOutputBytes, isWatch: watchMode })
    ]
};

async function runBuild() {
    try {
        if (watchMode) {
            const context = await esbuild.context(buildOptions);
            await context.watch();
            console.log("[esbuild] Watching for changes...");
        } else {
            await esbuild.build(buildOptions);
            console.log("[esbuild] Build complete.");
        }
    } catch (error) {
        console.error("[esbuild] Build failed.", error);
        process.exitCode = 1;
    }
}

runBuild();
